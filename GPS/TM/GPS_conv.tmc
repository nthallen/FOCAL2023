%{
  /* GPS_conv.tmc */
  /*
   * Need to calculate:
   *  - GPS_Tdrift
   * GPS_Lat_deg GPS_Lat_min GPS_Lat_Ord
   * GPS_Lon_deg GPS_Lon_min GPS_Lon_Ord
   * GPS_N_meters GPS_E_meters
   */
  #include <cmath>
  #include <time.h>

  double calc_GPS_drift(double TMtime, double GPS_secs,
      uint8_t YY, uint8_t MM, uint8_t DD) {
    struct tm buft;
    time_t ltime;
    
    buft.tm_year = YY+100; // Years since 1900
    buft.tm_mon = MM-1;
    buft.tm_mday = DD;
    int GPS_minutes = floor(GPS_secs/60);
    double just_secs = GPS_secs - 60*GPS_minutes;
    int GPS_hours = GPS_minutes/60;
    GPS_minutes -= GPS_hours*60;
    buft.tm_hour = GPS_hours;
    buft.tm_min = GPS_minutes;
    buft.tm_sec = 0;
    buft.tm_isdst = 0;
    ltime = mktime(&buft);
    double GPS_time = ltime + just_secs;
    double GPS_TDrift = TMtime - GPS_time;
    return GPS_TDrift;
  }
  
%}
/* Drift is defined as TM_time - GPS_time */
TM typedef double GPS_TDrift_t { text "%8.3lf"; }

GPS_TDrift_t GPS_TDrift; Invalidate GPS_TDrift;
{ GPS_TDrift =
    calc_GPS_drift(dtime(), GPS_secs_UTC,
      GPS_YY, GPS_MM, GPS_DD);
  Validate GPS_TDrift;
}

GPS_degmin_t GPS_Lat; Invalidate GPS_Lat;
GPS_deg_t GPS_Lat_deg; Invalidate GPS_Lat_deg;
GPS_min_t GPS_Lat_min; Invalidate GPS_Lat_min;
GPS_ordinal_t GPS_Lat_ord; Invalidate GPS_Lat_ord;
{ int32_t pLat;
  if (GPS_Lat_min_em4 > 1990*600000) {
    GPS_Lat = 9999.;
    GPS_Lat_deg = 9999;
    GPS_Lat_min = 9999.;
    GPS_Lat_Ord = 5;
  } else {
    GPS_Lat = GPS_Lat_min_em4/600000.;
    if (GPS_Lat_min_em4 < 0) {
      pLat = -GPS_Lat_min_em4;
      GPS_Lat_Ord = 1; /* South */
    } else {
      pLat = GPS_Lat_min_em4;
      GPS_Lat_Ord = 0; /* North */
    }
    GPS_Lat_deg = pLat/600000;
    GPS_Lat_min = (GPS_Lat - GPS_Lat_deg*600000)/10000.;
  }
  Validate GPS_Lat;
  Validate GPS_Lat_deg;
  Validate GPS_Lat_min;
  Validate GPS_Lat_ord;
}

GPS_degmin_t GPS_Lon; Invalidate GPS_Lon;
GPS_deg_t GPS_Lon_deg; Invalidate GPS_Lon_deg;
GPS_min_t GPS_Lon_min; Invalidate GPS_Lon_min;
GPS_ordinal_t GPS_Lon_ord; Invalidate GPS_Lon_ord;
{ int32_t pLon;
  if (GPS_Lon_min_em4 > 1990*600000) {
    GPS_Lon = 9999.;
    GPS_Lon_deg = 9999;
    GPS_Lon_min = 9999.;
    GPS_Lon_Ord = 5;
  } else {
    GPS_Lon = GPS_Lon_min_em4/600000.;
    if (GPS_Lon < 0) {
      pLon = -GPS_Lon;
      GPS_Lon_Ord = 3; /* East */
    } else {
      pLon = GPS_Lon;
      GPS_Lon_Ord = 2; /* West */
    }
    GPS_Lon_deg = pLon/600000;
    GPS_Lon_min = (GPS_Lon - GPS_Lon_deg*600000)/10000.;
  }
  Validate GPS_Lon;
  Validate GPS_Lon_deg;
  Validate GPS_Lon_min;
  Validate GPS_Lon_ord;
}
